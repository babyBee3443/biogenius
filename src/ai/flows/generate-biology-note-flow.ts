
'use server';
/**
 * @fileOverview AI flow for generating biology notes.
 *
 * - generateBiologyNote - A function that handles biology note generation.
 * - GenerateBiologyNoteInput - The input type for the generateBiologyNote function.
 * - GenerateBiologyNoteOutput - The return type for the generateBiologyNote function.
 */

import {ai} from '@/ai/ai-instance'; // Use the existing ai instance
import {z} from 'genkit';

// --- Block Schemas ---
// Base block with common fields
const BaseBlockSchema = z.object({
  // id: z.string().describe("A unique identifier for the block. This will be regenerated by the client, so AI can provide a placeholder like 'ai-block-1'."),
  // type will be part of the discriminated union
});

const TextBlockSchema = BaseBlockSchema.extend({
  type: z.literal('text'),
  content: z.string().describe("Text content. Use Markdown-like syntax for bold (**text**), italic (*text*), and newlines for paragraphs."),
});

const HeadingBlockSchema = BaseBlockSchema.extend({
  type: z.literal('heading'),
  level: z.number().min(2).max(4).describe("Heading level (2-4). H2 for main sections, H3-H4 for sub-sections within the note."),
  content: z.string().describe("Heading text content."),
});

const ImageBlockSchema = BaseBlockSchema.extend({
  type: z.literal('image'),
  url: z.string().url().or(z.literal("https://picsum.photos/seed/ai-placeholder/800/400")).describe("URL of a relevant image. If a specific image isn't known, use 'https://picsum.photos/seed/ai-placeholder/800/400' as a placeholder. Provide a descriptive seed like 'ai-cell-division' or 'ai-photosynthesis-diagram' in the picsum URL."),
  alt: z.string().describe("Alternative text for the image, describing its content for accessibility and SEO."),
  caption: z.string().optional().describe("Optional caption for the image, providing context or a short explanation."),
});

const VideoBlockSchema = BaseBlockSchema.extend({
  type: z.literal('video'),
  url: z.string().url().describe("URL of a relevant YouTube video. Try to find a short, explanatory video if possible."),
  youtubeId: z.string().optional().nullable().describe("The YouTube video ID, extracted from the URL if it's a YouTube link. (e.g., for 'https://www.youtube.com/watch?v=dQw4w9WgXcQ', the ID is 'dQw4w9WgXcQ')."),
});

const QuoteBlockSchema = BaseBlockSchema.extend({
  type: z.literal('quote'),
  content: z.string().describe("The quote text. This should be a concise and impactful statement related to the topic."),
  citation: z.string().optional().describe("Optional citation for the quote (e.g., author, source)."),
});

const DividerBlockSchema = BaseBlockSchema.extend({
  type: z.literal('divider'),
  // No specific fields for divider, it's just a visual separator.
});

// For now, AI will focus on simpler blocks. Section blocks can be added by the user manually.
// const SectionBlockSchema = BaseBlockSchema.extend({
//   type: z.literal('section'),
//   sectionType: z.string().describe("Type of the section, e.g., 'custom-text'. For this task, primarily use 'custom-text'."),
//   settings: z.record(z.any()).describe("Settings specific to the sectionType. For 'custom-text', include a 'content' key with HTML string for the text."),
// });

const ContentBlockSchema = z.discriminatedUnion("type", [
  TextBlockSchema,
  HeadingBlockSchema,
  ImageBlockSchema,
  VideoBlockSchema,
  QuoteBlockSchema,
  DividerBlockSchema,
  // SectionBlockSchema, // Keep it simple for now
]).describe("A content block for the biology note. Ensure a logical flow and variety of block types to make the note engaging.");
export type ContentBlock = z.infer<typeof ContentBlockSchema>;


// --- Input and Output Schemas for the Flow ---
export const GenerateBiologyNoteInputSchema = z.object({
  topic: z.string().describe('The main topic for the biology note (e.g., "Fotosentez", "Hücre Yapısı").'),
  level: z.enum(['Lise 9', 'Lise 10', 'Lise 11', 'Lise 12', 'Genel']).describe('Target audience level for the note.'),
  keywords: z.string().optional().describe('Comma-separated keywords to focus on (e.g., "ATP, kloroplast, ışık reaksiyonları").'),
  outline: z.string().optional().describe('A brief outline or specific sections the user wants to include (e.g., "Tanım, Aşamaları, Önemi, Örnek bir görsel"). This helps structure the note.'),
});
export type GenerateBiologyNoteInput = z.infer<typeof GenerateBiologyNoteInputSchema>;

export const GenerateBiologyNoteOutputSchema = z.object({
  title: z.string().describe("A clear and concise title for the biology note, reflecting the topic and level."),
  summary: z.string().describe("A brief summary (2-3 sentences) of the note's content, suitable for a quick overview."),
  tags: z.array(z.string()).min(3).max(7).describe("An array of 3 to 7 relevant keywords (tags) for the note, derived from the topic and content."),
  contentBlocks: z.array(ContentBlockSchema).min(3).describe("An array of at least 3 content blocks (headings, text, images, etc.) that form the main body of the note. The 'id' for each block will be handled by the client, so you can use placeholders like 'ai-block-1', 'ai-block-2', etc."),
});
export type GenerateBiologyNoteOutput = z.infer<typeof GenerateBiologyNoteOutputSchema>;


// --- Genkit Prompt Definition ---
const biologyNotePrompt = ai.definePrompt({
  name: 'generateBiologyNotePrompt',
  input: { schema: GenerateBiologyNoteInputSchema },
  output: { schema: GenerateBiologyNoteOutputSchema },
  prompt: `
    You are an expert biology educator creating concise and informative study notes for high school students.
    Your task is to generate a biology note based on the provided topic, level, keywords, and outline.

    Note Topic: {{{topic}}}
    Target Level: {{{level}}}
    {{#if keywords}}Keywords to include/focus on: {{{keywords}}}{{/if}}
    {{#if outline}}User-provided outline/sections to include: {{{outline}}}{{/if}}

    Please generate the following:
    1.  **Title**: A clear and engaging title for the note.
    2.  **Summary**: A short (2-3 sentences) summary of the note.
    3.  **Tags**: An array of 3-7 relevant keywords.
    4.  **Content Blocks**: An array of at least 3 content blocks. These blocks should follow the structure of the 'ContentBlock' schema provided.
        *   Use a variety of block types (text, heading, image, video, quote, divider) to make the note engaging and easy to understand.
        *   For headings, use H2 for main sections and H3/H4 for sub-sections.
        *   For text blocks, use clear and concise language. You can use Markdown-like syntax for **bold** and *italic* text. Newlines will be treated as paragraph breaks.
        *   For image blocks:
            *   Provide a relevant url. If a specific image is not known, use a placeholder like "https://picsum.photos/seed/ai-photosynthesis-diagram/800/400", making sure the 'seed' is descriptive (e.g., 'ai-cell-division', 'ai-dna-structure').
            *   Provide a descriptive alt text.
            *   Optionally, add a caption.
        *   For video blocks:
            *   Provide a relevant YouTube video url.
            *   Extract and provide the youtubeId.
        *   For quote blocks, provide the quote content and an optional citation.
        *   Use divider blocks to visually separate distinct sections.
        *   Ensure the content is accurate, well-structured, and appropriate for the specified 'level'.
        *   Block 'id's will be generated by the client, so the AI can provide placeholder IDs like 'ai-block-1', 'ai-block-2', or omit them.
    
    Prioritize clarity, accuracy, and conciseness. The goal is to create a helpful study resource.
    Ensure the output strictly adheres to the 'GenerateBiologyNoteOutput' schema.
  `,
});

// --- Genkit Flow Definition ---
const generateBiologyNoteFlow = ai.defineFlow(
  {
    name: 'generateBiologyNoteFlow',
    inputSchema: GenerateBiologyNoteInputSchema,
    outputSchema: GenerateBiologyNoteOutputSchema,
  },
  async (input) => {
    const { output } = await biologyNotePrompt(input);
    if (!output) {
      throw new Error("AI did not return an output for biology note generation.");
    }
    // Ensure placeholder IDs if AI doesn't provide them, or standardize them
    // For now, we assume the client will handle ID generation on block creation.
    // If AI provides IDs, they might be used as a hint or ignored.
    return output;
  }
);

// --- Exported Wrapper Function ---
export async function generateBiologyNote(input: GenerateBiologyNoteInput): Promise<GenerateBiologyNoteOutput> {
  return generateBiologyNoteFlow(input);
}

