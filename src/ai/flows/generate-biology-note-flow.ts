
'use server';
/**
 * @fileOverview AI flow for generating biology notes.
 *
 * - generateBiologyNote - A function that handles biology note generation.
 * - GenerateBiologyNoteInput - The input type for the generateBiologyNote function.
 * - GenerateBiologyNoteOutput - The return type for the generateBiologyNote function.
 */

import {ai} from '@/ai/ai-instance'; // Use the existing ai instance
import {z}  from 'genkit/zod'; // Use from genkit/zod for schema definition

// --- Block Schemas ---
// Base block with common fields
const BaseBlockSchema = z.object({
  // id: z.string().describe("A unique identifier for the block. This will be regenerated by the client, so AI can provide a placeholder like 'ai-block-1'.")
});

const TextBlockSchema = BaseBlockSchema.extend({
  type: z.enum(['text']).describe("The type of the block, must be 'text' for this block type."),
  content: z.string().describe("Text content. Use Markdown-like syntax for bold (**text**), italic (*text*), and newlines for paragraphs."),
});

const HeadingBlockSchema = BaseBlockSchema.extend({
  type: z.enum(['heading']).describe("The type of the block, must be 'heading' for this block type."),
  level: z.number().min(2).max(4).describe("Heading level (2-4). H2 for main sections, H3-H4 for sub-sections within the note."),
  content: z.string().describe("Heading text content."),
});

const ImageBlockSchema = BaseBlockSchema.extend({
  type: z.enum(['image']).describe("The type of the block, must be 'image' for this block type."),
  url: z.string().describe("URL of a relevant image. If a specific image isn't known, use a placeholder like 'https://picsum.photos/seed/ai-placeholder/800/400'. Provide a descriptive seed like 'ai-cell-division' or 'ai-photosynthesis-diagram' in the picsum URL if using a placeholder."),
  alt: z.string().describe("Alternative text for the image, describing its content for accessibility and SEO."),
  caption: z.string().optional().describe("Optional caption for the image, providing context or a short explanation."),
});

const VideoBlockSchema = BaseBlockSchema.extend({
  type: z.enum(['video']).describe("The type of the block, must be 'video' for this block type."),
  url: z.string().describe("URL of a relevant YouTube video. Try to find a short, explanatory video if possible."),
  youtubeId: z.string().optional().nullable().describe("The YouTube video ID, extracted from the URL if it's a YouTube link. (e.g., for 'https://www.youtube.com/watch?v=dQw4w9WgXcQ', the ID is 'dQw4w9WgXcQ')."),
});

const QuoteBlockSchema = BaseBlockSchema.extend({
  type: z.enum(['quote']).describe("The type of the block, must be 'quote' for this block type."),
  content: z.string().describe("The quote text. This should be a concise and impactful statement related to the topic."),
  citation: z.string().optional().describe("Optional citation for the quote (e.g., author, source)."),
});

const DividerBlockSchema = BaseBlockSchema.extend({
  type: z.enum(['divider']).describe("The type of the block, must be 'divider' for this block type."),
});


const ContentBlockSchema = z.union([
  TextBlockSchema,
  HeadingBlockSchema,
  ImageBlockSchema,
  VideoBlockSchema,
  QuoteBlockSchema,
  DividerBlockSchema,
]).describe("A content block for the biology note. The 'type' field must be one of 'text', 'heading', 'image', 'video', 'quote', or 'divider'.");
export type ContentBlock = z.infer<typeof ContentBlockSchema>;


// --- Input and Output Schemas for the Flow ---
const GenerateBiologyNoteInputSchema = z.object({
  topic: z.string().describe('The main topic for the biology note (e.g., "Fotosentez", "Hücre Yapısı").'),
  level: z.enum(['Lise 9', 'Lise 10', 'Lise 11', 'Lise 12', 'Genel']).describe('Target audience level for the note.'),
  keywords: z.string().optional().describe('Comma-separated keywords to focus on (e.g., "ATP, kloroplast, ışık reaksiyonları").'),
  outline: z.string().optional().describe('A brief outline or specific sections the user wants to include (e.g., "Tanım, Aşamaları, Önemi, Örnek bir görsel"). This helps structure the note.'),
});
export type GenerateBiologyNoteInput = z.infer<typeof GenerateBiologyNoteInputSchema>;

const GenerateBiologyNoteOutputSchema = z.object({
  title: z.string().describe("A clear and concise title for the biology note, reflecting the topic and level."),
  summary: z.string().describe("A brief summary (2-3 sentences) of the note's content, suitable for a quick overview."),
  tags: z.array(z.string()).min(3).max(7).describe("An array of 3 to 7 relevant keywords (tags) for the note, derived from the topic and content."),
  contentBlocks: z.array(ContentBlockSchema).min(3).describe("An array of at least 3 content blocks that form the main body of the note. Each block must have a 'type' field and only the relevant fields for that type."),
});
export type GenerateBiologyNoteOutput = z.infer<typeof GenerateBiologyNoteOutputSchema>;


// --- Genkit Prompt Definition ---
const biologyNotePrompt = ai.definePrompt({
  name: 'generateBiologyNotePrompt',
  input: { schema: GenerateBiologyNoteInputSchema },
  output: { schema: GenerateBiologyNoteOutputSchema },
  prompt: `
    You are an expert biology educator tasked with assisting a user in creating concise and informative study notes for high school students.
    Your role is to **suggest** content for the different parts of a biology note based on the provided topic, level, keywords, and outline.
    You will identify the key information needed for each field in the output schema (title, summary, tags, contentBlocks) and provide relevant suggestions.

    Note Topic: {{{topic}}}
    Target Level: {{{level}}}
    {{#if keywords}}Keywords to include/focus on: {{{keywords}}}{{/if}}
    {{#if outline}}User-provided outline/sections to include: {{{outline}}}{{/if}}

    Please provide suggestions for the following:
    1.  **Title Suggestion**: A clear and engaging title for the note.
    2.  **Summary Suggestion**: A short (2-3 sentences) summary of what the note could cover.
    3.  **Tag Suggestions**: An array of 3-7 relevant keywords.
    4.  **Content Block Suggestions**: An array of at least 3 content block ideas. For each block, describe:
        *   The **type** of block (e.g., 'text', 'heading', 'image', 'video', 'quote', 'divider').
        *   The **content or information** that should be included in that block.
        *   For 'heading' blocks, suggest a level (2-4) and the heading text.
        *   For 'text' blocks, describe the key points or explanation to include. You can use Markdown-like syntax for **bold** and *italic* text.
        *   For 'image' blocks, suggest a relevant image URL (use a placeholder like "https://picsum.photos/seed/ai-photosynthesis-diagram/800/400" with a descriptive seed if a specific image isn't known) and describe its alt text and an optional caption.
        *   For 'video' blocks, suggest a relevant YouTube video URL and extract its youtubeId.
        *   For 'quote' blocks, suggest a quote and an optional citation.
        *   Use 'divider' blocks to suggest visual separation between distinct sections.

    Your goal is to provide a structured set of suggestions that the user can then use to fill in the actual note editor.
    Ensure your output strictly adheres to the 'GenerateBiologyNoteOutput' schema, where each field contains your *suggestion* for that part of the note.
    The user will then take these suggestions and finalize the content in their editor.
  `,
});

// --- Genkit Flow Definition ---
const generateBiologyNoteFlow = ai.defineFlow(
  {
    name: 'generateBiologyNoteFlow',
    inputSchema: GenerateBiologyNoteInputSchema,
    outputSchema: GenerateBiologyNoteOutputSchema,
  },
  async (input) => {
    const { output } = await biologyNotePrompt(input);
    if (!output) {
      throw new Error("AI did not return an output for biology note generation.");
    }
    return output;
  }
);

// --- Exported Wrapper Function ---
export async function generateBiologyNote(input: GenerateBiologyNoteInput): Promise<GenerateBiologyNoteOutput> {
  return generateBiologyNoteFlow(input);
}


    